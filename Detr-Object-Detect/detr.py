# -*- coding: utf-8 -*-
"""Detr.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/168Qf65io3HsjcwChN6IMbrYz9W4gxLV5
"""

# @title Before running the line, make sure you have installed the necassary packages

from transformers import DetrImageProcessor, DetrForObjectDetection
import torch
from PIL import Image
import requests
import matplotlib.pyplot as plt
from matplotlib.patches import Rectangle
import gradio as gr
import numpy as np

def detect_object(input_image,Threshold):
  #Setting input image and the thershold
    image = input_image
    threshold_num = Threshold / 100
  #Load the model,will download the model if running at first time,and keep on date
    processor = DetrImageProcessor.from_pretrained("facebook/detr-resnet-50", revision="no_timm")
    model = DetrForObjectDetection.from_pretrained("facebook/detr-resnet-50", revision="no_timm")
  #Process the input image by using the loaded model, and set the threshold
    inputs = processor(images=image, return_tensors="pt")
    outputs = model(**inputs)
    target_sizes = torch.tensor([image.size[::-1]])
    results = processor.post_process_object_detection(outputs, target_sizes=target_sizes, threshold=threshold_num)[0]
  #Adding a axis plot to the image
    fig, ax = plt.subplots(1)
    ax.imshow(image)
  #Turn off the axis
    ax.axis('off')
  #Load the confident scores and it's labels, and draw a boxes around the detected object
    labels = []
    for score, label, box in zip(results["scores"], results["labels"], results["boxes"]):
        box = [round(i, 2) for i in box.tolist()]
        labels.append(f"{model.config.id2label[label.item()]}: {round(score.item(), 3)}")
        rect = Rectangle((box[0], box[1]), box[2]-box[0], box[3]-box[1], linewidth=1, edgecolor='r', facecolor='none')
        ax.add_patch(rect)
  #Sort the confident scores from high to low, and convert the scores to float, label as string by default
    scores=results["scores"]

    sorted_labels_with_probs = sorted(list(zip(labels, scores)), key=lambda x: x[1], reverse=True)

    sorted_labels_with_probs_dict = {label: float(prob) for label, prob in sorted_labels_with_probs}

    #Convert plot to image
    fig.canvas.draw()
    img = np.frombuffer(fig.canvas.tostring_rgb(), dtype=np.uint8)
    img = img.reshape(fig.canvas.get_width_height()[::-1] + (3,))
    plt.close(fig)
    #Return the result
    return img, sorted_labels_with_probs_dict
    #Setting the gradio interface
iface = gr.Interface(
    fn=detect_object,
    inputs=[gr.Image(type='pil'),gr.Slider(0,100, info="Adjust the shown Thershold here")],
    outputs=[gr.Image(), gr.Label()],
    title="Detr Object Detector",
    description="The program will analaysis the input image then draw an boxes to the detected object"
)
    #Launch the gradio interface include showing the debug
iface.launch(debug=True, inline=True)
print(f'To close the server, simply press CTRL+C')
with open('url.txt', 'w') as f:
    f.write(iface.url)
print(f'Running on {iface.url}')